name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24.3'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run: gofmt -s -w ."
            gofmt -s -l .
            exit 1
          fi

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: staticcheck ./...

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          binary_name="bedrock-forge"
          if [ "${{ matrix.os }}" = "windows" ]; then
            binary_name="bedrock-forge.exe"
          fi
          
          go build -ldflags "-X main.version=${{ github.sha }}" \
            -o "dist/${binary_name}-${{ matrix.os }}-${{ matrix.arch }}" \
            ./cmd/bedrock-forge

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bedrock-forge-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/bedrock-forge-*
          retention-days: 30

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'

      - name: Build bedrock-forge
        run: go build -o bedrock-forge ./cmd/bedrock-forge

      - name: Run integration tests
        run: |
          # Test basic functionality
          ./bedrock-forge version
          
          # Test validation with examples (excluding enterprise validation test)
          if [ -d "examples" ]; then
            # Copy examples to temp directory excluding enterprise validation test
            cp -r examples examples-temp
            rm -rf examples-temp/enterprise-validation-test
            ./bedrock-forge validate examples-temp/
            rm -rf examples-temp
          fi
          
          # Test generation with examples (excluding enterprise validation test)
          if [ -d "examples" ]; then
            # Use the same temp directory for generation
            cp -r examples examples-temp
            rm -rf examples-temp/enterprise-validation-test
            ./bedrock-forge generate examples-temp/ ./test-output
            rm -rf examples-temp
            
            # Verify Terraform files were generated
            if [ ! -f "./test-output/main.tf" ]; then
              echo "‚ùå main.tf not generated"
              exit 1
            fi
            
            # Validate generated Terraform
            cd test-output
            terraform init -backend=false
            terraform validate
            echo "‚úÖ Generated Terraform is valid"
          fi


  validate-examples:
    name: Validate Examples
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build bedrock-forge
        run: go build -o bedrock-forge ./cmd/bedrock-forge

      - name: Validate all examples
        run: |
          if [ -d "examples" ]; then
            echo "üîç Validating examples..."
            
            # Find all YAML files in examples (excluding enterprise validation test)
            find examples/ -path "*/enterprise-validation-test/*" -prune -o -name "*.yml" -print -o -name "*.yaml" -print | while read file; do
              echo "Validating: $file"
              
              # Extract directory for validation
              dir=$(dirname "$file")
              ./bedrock-forge validate "$dir"
            done
            
            echo "‚úÖ All examples are valid"
          else
            echo "‚ö†Ô∏è No examples directory found"
          fi

  # Job to mark all checks as successful for branch protection
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [test, build, integration-test, validate-examples]
    if: always()
    
    steps:
      - name: Check all jobs
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "‚ùå Tests failed"
            exit 1
          fi
          
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "‚ùå Build failed"
            exit 1
          fi
          
          if [ "${{ needs.integration-test.result }}" != "success" ] && [ "${{ needs.integration-test.result }}" != "skipped" ]; then
            echo "‚ùå Integration tests failed"
            exit 1
          fi
          
          
          if [ "${{ needs.validate-examples.result }}" != "success" ] && [ "${{ needs.validate-examples.result }}" != "skipped" ]; then
            echo "‚ùå Example validation failed"
            exit 1
          fi
          
          echo "‚úÖ All checks passed!"