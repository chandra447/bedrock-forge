name: Bedrock Forge Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  BEDROCK_FORGE_VERSION: "latest"
  TF_VERSION: "1.5.0"

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      resources-found: ${{ steps.scan.outputs.resources-found }}
      lambdas-found: ${{ steps.scan.outputs.lambdas-found }}
      schemas-found: ${{ steps.scan.outputs.schemas-found }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build Bedrock Forge
        run: |
          go build -o bedrock-forge ./cmd/bedrock-forge

      - name: Validate YAML configurations
        run: |
          ./bedrock-forge validate .
          echo "‚úÖ All YAML configurations are valid"

      - name: Scan for resources
        id: scan
        run: |
          output=$(./bedrock-forge scan .)
          echo "scan-output<<EOF" >> $GITHUB_OUTPUT
          echo "$output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Count resources for pipeline optimization
          resources=$(echo "$output" | grep -c "Found:" || echo "0")
          lambdas=$(echo "$output" | grep -c "Lambda:" || echo "0")
          schemas=$(echo "$output" | grep -c "ActionGroup:" || echo "0")
          
          echo "resources-found=$resources" >> $GITHUB_OUTPUT
          echo "lambdas-found=$lambdas" >> $GITHUB_OUTPUT
          echo "schemas-found=$schemas" >> $GITHUB_OUTPUT

  package:
    name: Package Artifacts
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.lambdas-found > 0 || needs.validate.outputs.schemas-found > 0
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build Bedrock Forge
        run: |
          go build -o bedrock-forge ./cmd/bedrock-forge

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_DEPLOYMENT_ROLE }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Package Lambda functions and schemas
        run: |
          # This will be implemented in the Bedrock Forge tool
          # For now, we'll use the generate command which handles packaging
          echo "üì¶ Packaging Lambda functions and OpenAPI schemas..."
          ./bedrock-forge generate . ./terraform-output
          echo "‚úÖ Packaging completed"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-config
          path: terraform-output/
          retention-days: 30

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, package]
    if: always() && needs.validate.result == 'success'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        if: needs.package.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: terraform-config
          path: terraform-output/

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Build Bedrock Forge
        run: |
          go build -o bedrock-forge ./cmd/bedrock-forge

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_DEPLOYMENT_ROLE }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Generate Terraform configuration
        run: |
          echo "üîß Generating Terraform configuration..."
          ./bedrock-forge generate . ./terraform-output
          echo "‚úÖ Terraform configuration generated"

      - name: Initialize Terraform
        working-directory: terraform-output
        run: |
          # Configure S3 backend
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "${{ vars.TF_STATE_BUCKET }}"
              key            = "${{ vars.TF_STATE_KEY_PREFIX }}/${{ github.event.inputs.environment || 'dev' }}/terraform.tfstate"
              region         = "${{ vars.AWS_REGION || 'us-east-1' }}"
              dynamodb_table = "${{ vars.TF_STATE_LOCK_TABLE }}"
              encrypt        = true
            }
          }
          EOF
          
          terraform init

      - name: Plan Terraform changes
        working-directory: terraform-output
        run: |
          terraform plan \
            -var="environment=${{ github.event.inputs.environment || 'dev' }}" \
            -var="project_name=${{ github.repository }}" \
            -out=tfplan

      - name: Apply Terraform changes
        working-directory: terraform-output
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
        run: |
          terraform apply tfplan

      - name: Output deployment results
        working-directory: terraform-output
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ vars.AWS_REGION || 'us-east-1' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform State**: ${{ vars.TF_STATE_BUCKET }}/${{ vars.TF_STATE_KEY_PREFIX }}/${{ github.event.inputs.environment || 'dev' }}/terraform.tfstate" >> $GITHUB_STEP_SUMMARY
          
          # Get Terraform outputs
          terraform output -json > outputs.json
          if [ -s outputs.json ]; then
            echo "### Deployed Resources" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat outputs.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [validate, package, deploy]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "## Bedrock Forge Deployment Summary"
          echo "- **Validation**: ${{ needs.validate.result }}"
          echo "- **Packaging**: ${{ needs.package.result }}"
          echo "- **Deployment**: ${{ needs.deploy.result }}"
          
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
          else
            echo "‚ùå Deployment failed. Check the logs for details."
            exit 1
          fi