name: Bedrock Forge Validate & Deploy

on:
  workflow_call:
    inputs:
      validation_only:
        description: 'Run validation only (no deployment)'
        required: false
        default: true
        type: boolean
      environment:
        description: 'Environment to deploy (dev, staging, prod)'
        required: false
        default: 'dev'
        type: string
      aws_region:
        description: 'AWS Region for deployment'
        required: false
        default: 'us-east-1'
        type: string
      aws_role:
        description: 'AWS IAM Role ARN to assume for deployment (required if validation_only is false)'
        required: false
        type: string
      aws_session_name:
        description: 'AWS session name for the assumed role'
        required: false
        default: 'bedrock-forge-deploy'
        type: string
      terraform_version:
        description: 'Terraform version to use'
        required: false
        default: '1.5.0'
        type: string
      go_version:
        description: 'Go version to use for building Bedrock Forge'
        required: false
        default: '1.21'
        type: string
      bedrock_forge_version:
        description: 'Bedrock Forge version/ref to use (e.g., v1.0.0, main, latest)'
        required: false
        default: 'latest'
        type: string
      source_path:
        description: 'Path to YAML configurations in the repository'
        required: false
        default: '.'
        type: string
      tf_state_bucket:
        description: 'S3 bucket for Terraform state (required if validation_only is false)'
        required: false
        type: string
      tf_state_key_prefix:
        description: 'Key prefix for Terraform state in S3'
        required: false
        default: 'bedrock-forge'
        type: string
      tf_state_lock_table:
        description: 'DynamoDB table for Terraform state locking'
        required: false
        type: string
      dry_run:
        description: 'Run in dry-run mode (plan only, no apply)'
        required: false
        default: false
        type: boolean
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID (if not using OIDC)'
        required: false
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key (if not using OIDC)'
        required: false

env:
  AWS_REGION: ${{ inputs.aws_region }}
  TF_VERSION: ${{ inputs.terraform_version }}
  GO_VERSION: ${{ inputs.go_version }}

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      resources-found: ${{ steps.scan.outputs.resources-found }}
      lambdas-found: ${{ steps.scan.outputs.lambdas-found }}
      schemas-found: ${{ steps.scan.outputs.schemas-found }}
    
    steps:
      - name: Checkout user repository
        uses: actions/checkout@v4

      - name: Checkout Bedrock Forge
        uses: actions/checkout@v4
        with:
          repository: 'your-org/bedrock-forge'  
          ref: ${{ inputs.bedrock_forge_version }}
          path: .bedrock-forge

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build Bedrock Forge
        working-directory: .bedrock-forge
        run: |
          go build -o ../bedrock-forge ./cmd/bedrock-forge

      - name: Validate YAML configurations
        run: |
          ./bedrock-forge validate ${{ inputs.source_path }}
          echo "✅ All YAML configurations are valid"

      - name: Scan for resources
        id: scan
        run: |
          output=$(./bedrock-forge scan ${{ inputs.source_path }})
          echo "scan-output<<EOF" >> $GITHUB_OUTPUT
          echo "$output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Count resources for pipeline optimization
          resources=$(echo "$output" | grep -c "Total Resources Found:" || echo "0")
          lambdas=$(echo "$output" | grep -c "📦 Lambda" || echo "0")
          schemas=$(echo "$output" | grep -c "📦 ActionGroup" || echo "0")
          opensearch=$(echo "$output" | grep -c "📦 OpenSearchServerless" || echo "0")
          
          echo "resources-found=$resources" >> $GITHUB_OUTPUT
          echo "lambdas-found=$lambdas" >> $GITHUB_OUTPUT
          echo "schemas-found=$schemas" >> $GITHUB_OUTPUT
          echo "opensearch-found=$opensearch" >> $GITHUB_OUTPUT

      - name: Display scan results
        run: |
          echo "## Resource Scan Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.scan.outputs.scan-output }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  package:
    name: Package Artifacts
    runs-on: ubuntu-latest
    needs: validate
    if: inputs.validation_only != true && (needs.validate.outputs.lambdas-found > 0 || needs.validate.outputs.schemas-found > 0)
    
    steps:
      - name: Checkout user repository
        uses: actions/checkout@v4

      - name: Checkout Bedrock Forge
        uses: actions/checkout@v4
        with:
          repository: 'your-org/bedrock-forge'  # Update with actual repository
          ref: ${{ inputs.bedrock_forge_version }}
          path: .bedrock-forge

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build Bedrock Forge
        working-directory: .bedrock-forge
        run: |
          go build -o ../bedrock-forge ./cmd/bedrock-forge

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role }}
          role-session-name: ${{ inputs.aws_session_name }}
          aws-region: ${{ inputs.aws_region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Package Lambda functions and schemas
        run: |
          echo "📦 Packaging Lambda functions and OpenAPI schemas..."
          ./bedrock-forge generate ${{ inputs.source_path }} ./terraform-output
          echo "✅ Packaging completed"
          
          # List generated files for debugging
          echo "## Generated Files" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          find terraform-output -type f -name "*.tf" -o -name "*.json" -o -name "*.zip" | head -20 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-config-${{ inputs.environment }}
          path: terraform-output/
          retention-days: 30

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, package]
    if: inputs.validation_only != true && always() && needs.validate.result == 'success'
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Validate deployment parameters
        run: |
          if [ -z "${{ inputs.aws_role }}" ]; then
            echo "❌ aws_role is required for deployment"
            exit 1
          fi
          if [ -z "${{ inputs.tf_state_bucket }}" ]; then
            echo "❌ tf_state_bucket is required for deployment"
            exit 1
          fi
          echo "✅ All required deployment parameters provided"

      - name: Checkout user repository
        uses: actions/checkout@v4

      - name: Download artifacts
        if: needs.package.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: terraform-config-${{ inputs.environment }}
          path: terraform-output/

      - name: Checkout Bedrock Forge
        uses: actions/checkout@v4
        with:
          repository: 'your-org/bedrock-forge'  # Update with actual repository
          ref: ${{ inputs.bedrock_forge_version }}
          path: .bedrock-forge

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Build Bedrock Forge
        working-directory: .bedrock-forge
        run: |
          go build -o ../bedrock-forge ./cmd/bedrock-forge

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role }}
          role-session-name: ${{ inputs.aws_session_name }}
          aws-region: ${{ inputs.aws_region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Generate Terraform configuration
        if: needs.package.result != 'success'
        run: |
          echo "🔧 Generating Terraform configuration..."
          ./bedrock-forge generate ${{ inputs.source_path }} ./terraform-output
          echo "✅ Terraform configuration generated"

      - name: Configure Terraform backend
        if: inputs.tf_state_bucket != ''
        working-directory: terraform-output
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "${{ inputs.tf_state_bucket }}"
              key            = "${{ inputs.tf_state_key_prefix }}/${{ inputs.environment }}/terraform.tfstate"
              region         = "${{ inputs.aws_region }}"
              $(if [ -n "${{ inputs.tf_state_lock_table }}" ]; then echo "dynamodb_table = \"${{ inputs.tf_state_lock_table }}\""; fi)
              encrypt        = true
            }
          }
          EOF

      - name: Initialize Terraform
        working-directory: terraform-output
        run: |
          terraform init

      - name: Plan Terraform changes
        working-directory: terraform-output
        run: |
          terraform plan \
            -var="environment=${{ inputs.environment }}" \
            -var="project_name=${{ github.repository }}" \
            -out=tfplan
          
          # Save plan output for summary
          terraform show -no-color tfplan > tfplan.txt

      - name: Upload Terraform plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ inputs.environment }}
          path: terraform-output/tfplan.txt
          retention-days: 30

      - name: Apply Terraform changes
        working-directory: terraform-output
        if: inputs.dry_run != true && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch')
        run: |
          terraform apply tfplan

      - name: Output deployment results
        working-directory: terraform-output
        run: |
          if [ "${{ inputs.dry_run }}" == "true" ]; then
            echo "🔍 Dry run completed - no resources were deployed"
            echo "## Terraform Plan (Dry Run)" >> $GITHUB_STEP_SUMMARY
          else
            echo "🎉 Deployment completed successfully!"
            echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ inputs.aws_region }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Role**: ${{ inputs.aws_role }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ inputs.tf_state_bucket }}" ]; then
            echo "- **Terraform State**: ${{ inputs.tf_state_bucket }}/${{ inputs.tf_state_key_prefix }}/${{ inputs.environment }}/terraform.tfstate" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Get Terraform outputs if not dry run
          if [ "${{ inputs.dry_run }}" != "true" ] && [ -f "terraform.tfstate" ]; then
            terraform output -json > outputs.json 2>/dev/null || echo "{}" > outputs.json
            if [ -s outputs.json ] && [ "$(cat outputs.json)" != "{}" ]; then
              echo "### Deployed Resources" >> $GITHUB_STEP_SUMMARY
              echo '```json' >> $GITHUB_STEP_SUMMARY
              cat outputs.json >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Show plan summary
          if [ -f "tfplan.txt" ]; then
            echo "### Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -50 tfplan.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  cleanup:
    name: Summary
    runs-on: ubuntu-latest
    needs: [validate, package, deploy]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "## Bedrock Forge Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode**: ${{ inputs.validation_only == true && 'Validation Only' || 'Validation & Deployment' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation**: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.validation_only }}" == "true" ]; then
            echo "- **Packaging**: Skipped (validation only)" >> $GITHUB_STEP_SUMMARY
            echo "- **Deployment**: Skipped (validation only)" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment**: N/A (validation only)" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.validate.result }}" == "success" ]; then
              echo "✅ Validation completed successfully! Your YAML configurations are valid."
            else
              echo "❌ Validation failed. Check the logs for details."
              exit 1
            fi
          else
            echo "- **Packaging**: ${{ needs.package.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Deployment**: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Dry Run**: ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.deploy.result }}" == "success" ]; then
              if [ "${{ inputs.dry_run }}" == "true" ]; then
                echo "✅ Dry run completed successfully - review the plan above"
              else
                echo "✅ Deployment completed successfully!"
              fi
            elif [ "${{ needs.deploy.result }}" == "failure" ]; then
              echo "❌ Deployment failed. Check the logs for details."
              exit 1
            else
              echo "⚠️ Deployment was skipped or cancelled."
            fi
          fi