name: Bedrock Forge Deploy

on:
  push:
    branches: [ main, master ]
    paths:
      - '**/*.yml'
      - '**/*.yaml'
  workflow_dispatch:
    inputs:
      commit_hash:
        description: 'Commit hash to deploy (uses latest if not specified)'
        required: false
        type: string
      environment:
        description: 'Environment to deploy (dev, staging, prod)'
        required: true
        default: 'dev'
        type: string
      aws_region:
        description: 'AWS Region for deployment'
        required: false
        default: 'us-east-1'
        type: string
      aws_role:
        description: 'AWS IAM Role ARN to assume for deployment'
        required: true
        type: string
      aws_session_name:
        description: 'AWS session name for the assumed role'
        required: false
        default: 'bedrock-forge-deploy'
        type: string
      terraform_version:
        description: 'Terraform version to use'
        required: false
        default: '1.5.0'
        type: string
      tf_state_bucket:
        description: 'S3 bucket for Terraform state'
        required: true
        type: string
      tf_state_key_prefix:
        description: 'Key prefix for Terraform state in S3'
        required: false
        default: 'bedrock-forge'
        type: string
      tf_state_lock_table:
        description: 'DynamoDB table for Terraform state locking'
        required: false
        type: string
      dry_run:
        description: 'Run in dry-run mode (plan only, no apply)'
        required: false
        default: false
        type: boolean
      force_regenerate:
        description: 'Force regenerate Terraform instead of using S3 cached version'
        required: false
        default: false
        type: boolean
      terraform_branch:
        description: 'Target branch to push generated Terraform files (main branch only)'
        required: false
        default: 'terraform-generated'
        type: string
  workflow_call:
    inputs:
      commit_hash:
        description: 'Commit hash to deploy (uses latest if not specified)'
        required: false
        type: string
      environment:
        description: 'Environment to deploy (dev, staging, prod)'
        required: true
        default: 'dev'
        type: string
      aws_region:
        description: 'AWS Region for deployment'
        required: false
        default: 'us-east-1'
        type: string
      aws_role:
        description: 'AWS IAM Role ARN to assume for deployment'
        required: true
        type: string
      aws_session_name:
        description: 'AWS session name for the assumed role'
        required: false
        default: 'bedrock-forge-deploy'
        type: string
      terraform_version:
        description: 'Terraform version to use'
        required: false
        default: '1.5.0'
        type: string
      tf_state_bucket:
        description: 'S3 bucket for Terraform state'
        required: true
        type: string
      tf_state_key_prefix:
        description: 'Key prefix for Terraform state in S3'
        required: false
        default: 'bedrock-forge'
        type: string
      tf_state_lock_table:
        description: 'DynamoDB table for Terraform state locking'
        required: false
        type: string
      dry_run:
        description: 'Run in dry-run mode (plan only, no apply)'
        required: false
        default: false
        type: boolean
      force_regenerate:
        description: 'Force regenerate Terraform instead of using S3 cached version'
        required: false
        default: false
        type: boolean
      terraform_branch:
        description: 'Target branch to push generated Terraform files (main branch only)'
        required: false
        default: 'terraform-generated'
        type: string
    secrets:
      AWS_DEPLOYMENT_ROLE:
        description: 'AWS IAM Role ARN for deployment'
        required: false
      TERRAFORM_ARTIFACTS_BUCKET:
        description: 'S3 bucket for Terraform artifacts'
        required: true
      TERRAFORM_STATE_BUCKET:
        description: 'S3 bucket for Terraform state'
        required: true

env:
  AWS_REGION: ${{ inputs.aws_region || 'us-east-1' }}
  TF_VERSION: ${{ inputs.terraform_version || '1.5.0' }}
  GO_VERSION: '1.21'
  COMMIT_HASH: ${{ inputs.commit_hash || github.sha }}

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      commit-hash: ${{ env.COMMIT_HASH }}
      terraform-source: ${{ steps.check-terraform.outputs.terraform-source }}
      s3-path: ${{ steps.check-terraform.outputs.s3-path }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role || secrets.AWS_DEPLOYMENT_ROLE }}
          role-session-name: ${{ inputs.aws_session_name }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check for pre-validated Terraform modules
        id: check-terraform
        run: |
          BUCKET_NAME="${{ secrets.TERRAFORM_ARTIFACTS_BUCKET }}"
          S3_PATH="generated-modules/${{ env.COMMIT_HASH }}"
          
          # Check if pre-validated Terraform modules exist in S3
          if aws s3 ls s3://${BUCKET_NAME}/${S3_PATH}/ >/dev/null 2>&1; then
            echo "✅ Found pre-validated Terraform modules in S3"
            echo "terraform-source=s3" >> $GITHUB_OUTPUT
            echo "s3-path=s3://${BUCKET_NAME}/${S3_PATH}" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No pre-validated Terraform modules found in S3"
            if [ "${{ inputs.force_regenerate }}" == "true" ]; then
              echo "🔄 Force regeneration requested"
              echo "terraform-source=regenerate" >> $GITHUB_OUTPUT
            else
              echo "❌ No validated Terraform modules available for commit ${{ env.COMMIT_HASH }}"
              echo "Please run the validation workflow first or use force_regenerate=true"
              exit 1
            fi
          fi

      - name: Display preparation summary
        run: |
          echo "## 🚀 Deployment Preparation" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit Hash:** \`${{ env.COMMIT_HASH }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Source:** ${{ steps.check-terraform.outputs.terraform-source }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check-terraform.outputs.terraform-source }}" == "s3" ]; then
            echo "- **S3 Path:** ${{ steps.check-terraform.outputs.s3-path }}" >> $GITHUB_STEP_SUMMARY
          fi

  generate:
    name: Generate Terraform (if needed)
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.terraform-source == 'regenerate'
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout Bedrock Forge
        uses: actions/checkout@v4
        with:
          repository: 'your-org/bedrock-forge'
          ref: 'main'
          path: .bedrock-forge

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build Bedrock Forge
        working-directory: .bedrock-forge
        run: |
          go build -o ../bedrock-forge ./cmd/bedrock-forge

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role || secrets.AWS_DEPLOYMENT_ROLE }}
          role-session-name: ${{ inputs.aws_session_name }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate Terraform configuration
        run: |
          echo "🔧 Generating Terraform configuration..."
          ./bedrock-forge generate . ./terraform-output
          echo "✅ Terraform configuration generated"

      - name: Upload Terraform modules to S3
        run: |
          BUCKET_NAME="${{ secrets.TERRAFORM_ARTIFACTS_BUCKET }}"
          S3_PATH="generated-modules/${{ env.COMMIT_HASH }}"
          
          # Upload generated Terraform modules
          aws s3 cp terraform-output/ s3://${BUCKET_NAME}/${S3_PATH}/ --recursive
          echo "✅ Terraform modules uploaded to S3: s3://${BUCKET_NAME}/${S3_PATH}"

      - name: Push to Terraform Branch (Main branch only)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          BRANCH_NAME="${{ inputs.terraform_branch }}"
          
          # Configure git
          git config --global user.name "bedrock-forge-bot"
          git config --global user.email "bedrock-forge@users.noreply.github.com"
          
          # Create or checkout terraform branch
          git fetch origin || true
          if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
            git checkout -B $BRANCH_NAME origin/$BRANCH_NAME
          else
            git checkout -B $BRANCH_NAME
          fi
          
          # Clear existing content and copy new terraform files
          rm -rf terraform/ || true
          mkdir -p terraform/
          cp -r terraform-output/* terraform/
          
          # Add commit info
          cat > terraform/DEPLOYMENT_INFO.md << EOF
          # Terraform Deployment Information
          
          **Generated from:** \`${{ env.COMMIT_HASH }}\`
          **Generated at:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          **Source branch:** ${{ github.ref_name }}
          **Environment:** ${{ inputs.environment }}
          **Workflow:** ${{ github.workflow }}
          **Run ID:** ${{ github.run_id }}
          
          ## Deployment Commands
          
          \`\`\`bash
          # Initialize Terraform
          terraform init
          
          # Plan deployment
          terraform plan -var="environment=${{ inputs.environment }}"
          
          # Apply deployment
          terraform apply -var="environment=${{ inputs.environment }}"
          \`\`\`
          
          ## Generated Resources
          
          This terraform configuration was automatically generated by bedrock-forge from the YAML configurations in the main branch.
          
          **Do not manually edit these files** - they will be overwritten on the next deployment.
          EOF
          
          # Commit and push changes
          git add .
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🤖 Auto-generated terraform from commit ${{ env.COMMIT_HASH }}
            
            Generated from: ${{ github.ref_name }}
            Environment: ${{ inputs.environment }}
            Workflow: ${{ github.workflow }}
            Run ID: ${{ github.run_id }}
            
            This commit contains the generated Terraform configuration for deploying Bedrock agents.
            "
            git push origin $BRANCH_NAME
            echo "✅ Terraform files pushed to branch: $BRANCH_NAME"
          fi

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [prepare, generate]
    if: always() && needs.prepare.result == 'success' && (needs.generate.result == 'success' || needs.generate.result == 'skipped')
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role || secrets.AWS_DEPLOYMENT_ROLE }}
          role-session-name: ${{ inputs.aws_session_name }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform modules from S3
        run: |
          BUCKET_NAME="${{ secrets.TERRAFORM_ARTIFACTS_BUCKET }}"
          S3_PATH="generated-modules/${{ env.COMMIT_HASH }}"
          
          # Download pre-validated Terraform modules
          aws s3 cp s3://${BUCKET_NAME}/${S3_PATH}/ ./terraform-output/ --recursive
          echo "✅ Terraform modules downloaded from S3"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Terraform backend
        working-directory: terraform-output
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "${{ inputs.tf_state_bucket || secrets.TERRAFORM_STATE_BUCKET }}"
              key            = "${{ inputs.tf_state_key_prefix }}/${{ inputs.environment }}/terraform.tfstate"
              region         = "${{ env.AWS_REGION }}"
              $(if [ -n "${{ inputs.tf_state_lock_table }}" ]; then echo "dynamodb_table = \"${{ inputs.tf_state_lock_table }}\""; fi)
              encrypt        = true
            }
          }
          EOF

      - name: Initialize Terraform
        working-directory: terraform-output
        run: |
          terraform init

      - name: Plan Terraform changes
        working-directory: terraform-output
        run: |
          terraform plan \
            -var="environment=${{ inputs.environment }}" \
            -var="project_name=${{ github.repository }}" \
            -out=tfplan
          
          # Save plan output for summary
          terraform show -no-color tfplan > tfplan.txt

      - name: Upload Terraform plan to S3
        run: |
          BUCKET_NAME="${{ secrets.TERRAFORM_ARTIFACTS_BUCKET }}"
          S3_PATH="terraform-plans/${{ env.COMMIT_HASH }}"
          
          # Upload plan files
          aws s3 cp terraform-output/tfplan.txt s3://${BUCKET_NAME}/${S3_PATH}/plan-${{ inputs.environment }}.txt
          echo "✅ Terraform plan uploaded to S3: s3://${BUCKET_NAME}/${S3_PATH}"

      - name: Apply Terraform changes
        working-directory: terraform-output
        if: inputs.dry_run != true
        run: |
          terraform apply tfplan

      - name: Output deployment results
        working-directory: terraform-output
        run: |
          if [ "${{ inputs.dry_run }}" == "true" ]; then
            echo "🔍 Dry run completed - no resources were deployed"
            echo "## Terraform Plan (Dry Run)" >> $GITHUB_STEP_SUMMARY
          else
            echo "🎉 Deployment completed successfully!"
            echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Commit Hash:** \`${{ env.COMMIT_HASH }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Role:** ${{ inputs.aws_role || secrets.AWS_DEPLOYMENT_ROLE }}" >> $GITHUB_STEP_SUMMARY
          
          STATE_BUCKET="${{ inputs.tf_state_bucket || secrets.TERRAFORM_STATE_BUCKET }}"
          echo "- **Terraform State:** s3://${STATE_BUCKET}/${{ inputs.tf_state_key_prefix }}/${{ inputs.environment }}/terraform.tfstate" >> $GITHUB_STEP_SUMMARY
          
          # Get Terraform outputs if not dry run
          if [ "${{ inputs.dry_run }}" != "true" ] && [ -f "terraform.tfstate" ]; then
            terraform output -json > outputs.json 2>/dev/null || echo "{}" > outputs.json
            if [ -s outputs.json ] && [ "$(cat outputs.json)" != "{}" ]; then
              echo "### Deployed Resources" >> $GITHUB_STEP_SUMMARY
              echo '```json' >> $GITHUB_STEP_SUMMARY
              cat outputs.json >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Show plan summary
          if [ -f "tfplan.txt" ]; then
            echo "### Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -50 tfplan.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  cleanup:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [prepare, generate, deploy]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "## 🚀 Bedrock Forge Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit Hash:** \`${{ needs.prepare.outputs.commit-hash }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Source:** ${{ needs.prepare.outputs.terraform-source }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Preparation:** ${{ needs.prepare.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Generation:** ${{ needs.generate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment:** ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run:** ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            if [ "${{ inputs.dry_run }}" == "true" ]; then
              echo "✅ **Dry run completed successfully** - review the plan above"
            else
              echo "✅ **Deployment completed successfully!**"
            fi
          elif [ "${{ needs.deploy.result }}" == "failure" ]; then
            echo "❌ **Deployment failed.** Check the logs for details."
            exit 1
          else
            echo "⚠️ **Deployment was skipped or cancelled.**"
          fi