# Example GitHub Actions workflow for teams
# Copy this to .github/workflows/deploy.yml in your repository

name: Deploy Bedrock Agents

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  deploy:
    uses: your-org/bedrock-forge/.github/workflows/bedrock-forge-deploy.yml@main
    with:
      environment: ${{ github.event.inputs.environment || 'dev' }}
      working-directory: '.'
      terraform-version: '1.5.0'
    secrets: inherit

# Alternative: Self-contained workflow for teams that want more control
---
name: Custom Bedrock Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options: [dev, staging, prod]

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.5.0

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - name: Install Bedrock Forge
        run: |
          # Option 1: Build from source (if you have the code)
          go build -o bedrock-forge ./cmd/bedrock-forge
          
          # Option 2: Download pre-built binary
          # wget https://github.com/your-org/bedrock-forge/releases/latest/download/bedrock-forge-linux-amd64
          # chmod +x bedrock-forge-linux-amd64
          # mv bedrock-forge-linux-amd64 bedrock-forge
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_DEPLOYMENT_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Validate resources
        run: |
          ./bedrock-forge validate .
      
      - name: Generate and deploy
        run: |
          # Generate Terraform configuration
          ./bedrock-forge generate . ./terraform
          
          # Initialize Terraform
          cd terraform
          terraform init
          
          # Plan changes
          terraform plan -var="environment=${{ github.event.inputs.environment || 'dev' }}"
          
          # Apply changes (only on main branch)
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            terraform apply -auto-approve -var="environment=${{ github.event.inputs.environment || 'dev' }}"
          fi