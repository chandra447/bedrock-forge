# Example: Agent that uses custom resources for notifications
# Note: Environment variables are set in Lambda functions that the agent calls
kind: Agent
metadata:
  name: notification-agent
  description: Agent that sends notifications via custom SNS topic
spec:
  foundationModel: "anthropic.claude-3-haiku-20240307-v1:0"
  instruction: |
    You are a helpful customer service agent that processes customer inquiries
    and can send notifications about important events through your action groups.
  
  actionGroups:
    - name: "notification-handler"
      description: "Handles sending notifications via SNS"
      actionGroupExecutor:
        lambda: {ref: notification-lambda}  # Reference to Lambda with SNS access
      functionSchema:
        functions:
          - name: "send_notification"
            description: "Send a notification about a customer event"
            parameters:
              message:
                description: "The notification message to send"
                required: true
                type: "string"
              priority:
                description: "Priority level (low, medium, high)"
                required: false
                type: "string"

---
# Lambda function that has access to the custom SNS topic
kind: Lambda
metadata:
  name: notification-lambda
  description: Lambda function for sending notifications via custom SNS topic
spec:
  runtime: "python3.9"
  handler: "app.handler"
  code:
    source: "zip"
    zipFile: |
      import json
      import boto3
      import os
      
      def handler(event, context):
          sns = boto3.client('sns')
          topic_arn = os.environ['SNS_TOPIC_ARN']
          
          message = event.get('message', 'No message provided')
          priority = event.get('priority', 'medium')
          
          response = sns.publish(
              TopicArn=topic_arn,
              Message=json.dumps({
                  'message': message,
                  'priority': priority,
                  'timestamp': context.aws_request_id
              }),
              Subject=f'Agent Notification - {priority.upper()}'
          )
          
          return {
              'statusCode': 200,
              'body': json.dumps({
                  'message': 'Notification sent successfully',
                  'messageId': response['MessageId']
              })
          }
  
  # Environment variables reference the custom SNS topic
  environment:
    SNS_TOPIC_ARN: "${aws_sns_topic.agent_notifications.arn}"
    EVENTBRIDGE_RULE: "${aws_cloudwatch_event_rule.agent_events.name}"
  
  tags:
    Purpose: "notifications"
    CustomResources: "true"